{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "shgillasynapse1"
		},
		"shgillasynapse1-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'shgillasynapse1-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:shgillasynapse1.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"shgillasynapse1-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://shgillasynapse1datalake.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/shgillasynapse1-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('shgillasynapse1-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/shgillasynapse1-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('shgillasynapse1-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "insert into customTable1 Values ('test')\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "LakeDb1",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "858ad276-62cd-41de-a3bf-f44a7433dfb3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1040d77c-5c98-4c09-9c3d-feb4ee714d8f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/a270c03e-7d9d-4da1-9079-16d770f35765/resourceGroups/rgsynapse/providers/Microsoft.Synapse/workspaces/shgillasynapse1/bigDataPools/sparkpool1",
						"name": "sparkpool1",
						"type": "Spark",
						"endpoint": "https://shgillasynapse1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\n",
							"df = spark.sql(\"SELECT * FROM `LakeDb1`.`customTable1`\")\n",
							"df.show(10)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.sql(\"insert into `LakeDb1`.`customTable1` Values ('test')\")\r\n",
							"# df.show(10)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark \r\n",
							"display(spark.sql('SHOW CREATE TABLE `LakeDb1`.`customTable1`'))"
						],
						"outputs": [],
						"execution_count": 11
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LakeDb1')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "LakeDb1",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true,
								"DerivedModelDBInfo": "{\"ModelDirectives\":{\"BaseModel\":{\"Name\":\"Retail\",\"Version\":\"1.3.0\"}}}"
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://synapsefilesystem1@shgillasynapse1datalake.dfs.core.windows.net/LakeDb1",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "shgillasynapse1-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CycleCount",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "LakeDb1"
							},
							"Description": "Cycle counting is a process by which portions of the inventory are selected for counting on a regular basis.    Cycle counters are sent into the warehouse to physically view and count the material actually on hand.\n\nThe results of these cycle counts are used  to make corrections to recorded inventory levels.\n\nAn inventory accuracy audit technique where inventory is counted on a cyclic schedule rather than once a year.\n\nMost effective cycle counting programs require the counting of a certain number of items every workday with each item counted at a prescribed frequency.\n\nThe key purpose of cycle counting is to identify items in error, trigger research, identify and eliminate errors.\n\nCycle counting is designed to achieve four goals:\n\n(1) Catch and correct errors in inventory\n(2) Double-check corrects in inventory found by others\n(3) Validate the proper use of procedures for handing Items\n(4) Measure the accuracy of the inventory records\n\nThe frequency of cycle counting can be varied to focus management attention on the more valuable or important items or to match work processes. Some of the systems used are:\n\n- ABC system with the highest count frequency for items with the highest annual usage value\n\n- Reorder system when stocks are counted at the time of order\n\n- Receiver system with counting when goods are received\n\n- Zero balance system to count items when a backorder situation is reached to confirm that no stock is held\n\n- Transaction system where stocks are counted after a specified number of transactions",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CycleCountId",
										"Description": "The unique identifier of the Cycle Count.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCount.cdm.json/CycleCount",
											"Name": "CycleCountId"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CycleCountDate",
										"Description": "The date that the Cycle Count took place.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCount.cdm.json/CycleCount",
											"Name": "CycleCountDate"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CycleCountTypeId",
										"Description": "The unique identifier of a Cycle Count.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCount.cdm.json/CycleCount",
											"Name": "CycleCountTypeId"
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://synapsefilesystem1@shgillasynapse1datalake.dfs.core.windows.net/LakeDb1/CycleCount",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://synapsefilesystem1@shgillasynapse1datalake.dfs.core.windows.net/LakeDb1/CycleCount",
									"Properties": {
										"LinkedServiceName": "shgillasynapse1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CycleCountId\":{\"entity\":\"CycleCount.cdm.json/CycleCount\",\"name\":\"CycleCountId\"},\"CycleCountDate\":{\"entity\":\"CycleCount.cdm.json/CycleCount\",\"name\":\"CycleCountDate\"},\"CycleCountTypeId\":{\"entity\":\"CycleCount.cdm.json/CycleCount\",\"name\":\"CycleCountTypeId\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"name\":\"CycleCount\",\"description\":\"Cycle counting is a process by which portions of the inventory are selected for counting on a regular basis.    Cycle counters are sent into the warehouse to physically view and count the material actually on hand.\\n\\nThe results of these cycle counts are used  to make corrections to recorded inventory levels.\\n\\nAn inventory accuracy audit technique where inventory is counted on a cyclic schedule rather than once a year.\\n\\nMost effective cycle counting programs require the counting of a certain number of items every workday with each item counted at a prescribed frequency.\\n\\nThe key purpose of cycle counting is to identify items in error, trigger research, identify and eliminate errors.\\n\\nCycle counting is designed to achieve four goals:\\n\\n(1) Catch and correct errors in inventory\\n(2) Double-check corrects in inventory found by others\\n(3) Validate the proper use of procedures for handing Items\\n(4) Measure the accuracy of the inventory records\\n\\nThe frequency of cycle counting can be varied to focus management attention on the more valuable or important items or to match work processes. Some of the systems used are:\\n\\n- ABC system with the highest count frequency for items with the highest annual usage value\\n\\n- Reorder system when stocks are counted at the time of order\\n\\n- Receiver system with counting when goods are received\\n\\n- Zero balance system to count items when a backorder situation is reached to confirm that no stock is held\\n\\n- Transaction system where stocks are counted after a specified number of transactions\",\"baseEntityReference\":{\"name\":\"CycleCount\",\"path\":\"CycleCount.cdm.json/CycleCount\"},\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCount.cdm.json/CycleCount\",\"name\":\"CycleCountId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Cycle Count.\",\"isNullable\":false,\"name\":\"CycleCountId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCount.cdm.json/CycleCount\",\"name\":\"CycleCountDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the Cycle Count took place.\",\"isNullable\":true,\"name\":\"CycleCountDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCount.cdm.json/CycleCount\",\"name\":\"CycleCountTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Cycle Count.\",\"isNullable\":true,\"name\":\"CycleCountTypeId\"}]},\"primaryKey\":[\"CycleCountId\"]}}",
								"Description": "Cycle counting is a process by which portions of the inventory are selected for counting on a regular basis.    Cycle counters are sent into the warehouse to physically view and count the material actually on hand.\n\nThe results of these cycle counts are used  to make corrections to recorded inventory levels.\n\nAn inventory accuracy audit technique where inventory is counted on a cyclic schedule rather than once a year.\n\nMost effective cycle counting programs require the counting of a certain number of items every workday with each item counted at a prescribed frequency.\n\nThe key purpose of cycle counting is to identify items in error, trigger research, identify and eliminate errors.\n\nCycle counting is designed to achieve four goals:\n\n(1) Catch and correct errors in inventory\n(2) Double-check corrects in inventory found by others\n(3) Validate the proper use of procedures for handing Items\n(4) Measure the accuracy of the inventory records\n\nThe frequency of cycle counting can be varied to focus management attention on the more valuable or important items or to match work processes. Some of the systems used are:\n\n- ABC system with the highest count frequency for items with the highest annual usage value\n\n- Reorder system when stocks are counted at the time of order\n\n- Receiver system with counting when goods are received\n\n- Zero balance system to count items when a backorder situation is reached to confirm that no stock is held\n\n- Transaction system where stocks are counted after a specified number of transactions",
								"DisplayFolderInfo": "{\"name\":\"Inventory\",\"colorCode\":\"#EA279F\"}",
								"PrimaryKeys": "CycleCountId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CycleCountItemInventory",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "LakeDb1"
							},
							"Description": "The Item count at a Warehouse determined by the associated Cycle Count.",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "WarehouseLocationId",
										"Description": "The unique identifier of a location.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountItemInventory.cdm.json/CycleCountItemInventory",
											"Name": "WarehouseLocationId"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "ItemSku",
										"Description": "The Stock Keeping Unit identifier, which is typically used for inventory-related activities.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 40,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountItemInventory.cdm.json/CycleCountItemInventory",
											"Name": "ItemSku"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CycleCountId",
										"Description": "The unique identifier of the Cycle Count.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountItemInventory.cdm.json/CycleCountItemInventory",
											"Name": "CycleCountId"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "WarehouseId",
										"Description": "The unique identifier of a Warehouse.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountItemInventory.cdm.json/CycleCountItemInventory",
											"Name": "WarehouseId"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CycleCountExpectedQuantity",
										"Description": "The quantity of Items expected to be found during the Cycle Count.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountItemInventory.cdm.json/CycleCountItemInventory",
											"Name": "CycleCountExpectedQuantity"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CycleCountActualQuantity",
										"Description": "The quantity of Items actually found during the Cycle Count.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountItemInventory.cdm.json/CycleCountItemInventory",
											"Name": "CycleCountActualQuantity"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CycleCountDiscrepancyQuantity",
										"Description": "The difference between the actual stock held and the calculated stock or registered stock.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountItemInventory.cdm.json/CycleCountItemInventory",
											"Name": "CycleCountDiscrepancyQuantity"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "BlindCountIndicator",
										"Description": "Describes method used in cycle counting and physical inventories where you provide your counters with item number and location but no quantity information.",
										"OriginDataTypeName": {
											"TypeName": "boolean",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "boolean"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountItemInventory.cdm.json/CycleCountItemInventory",
											"Name": "BlindCountIndicator"
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://synapsefilesystem1@shgillasynapse1datalake.dfs.core.windows.net/LakeDb1/CycleCountItemInventory",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://synapsefilesystem1@shgillasynapse1datalake.dfs.core.windows.net/LakeDb1/CycleCountItemInventory",
									"Properties": {
										"LinkedServiceName": "shgillasynapse1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"WarehouseLocationId\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"WarehouseLocationId\"},\"ItemSku\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"ItemSku\"},\"CycleCountId\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"CycleCountId\"},\"WarehouseId\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"WarehouseId\"},\"CycleCountExpectedQuantity\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"CycleCountExpectedQuantity\"},\"CycleCountActualQuantity\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"CycleCountActualQuantity\"},\"CycleCountDiscrepancyQuantity\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"CycleCountDiscrepancyQuantity\"},\"BlindCountIndicator\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"BlindCountIndicator\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CycleCountItemInventory\",\"path\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\"},\"description\":\"The Item count at a Warehouse determined by the associated Cycle Count.\",\"primaryKey\":[\"WarehouseLocationId\",\"ItemSku\",\"CycleCountId\",\"WarehouseId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"WarehouseLocationId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a location.\",\"isNullable\":false,\"name\":\"WarehouseLocationId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"ItemSku\"},\"dataType\":\"string\",\"dataTypeLength\":40,\"description\":\"The Stock Keeping Unit identifier, which is typically used for inventory-related activities.\",\"isNullable\":false,\"name\":\"ItemSku\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"CycleCountId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Cycle Count.\",\"isNullable\":false,\"name\":\"CycleCountId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"WarehouseId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Warehouse.\",\"isNullable\":false,\"name\":\"WarehouseId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"CycleCountExpectedQuantity\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The quantity of Items expected to be found during the Cycle Count.\",\"isNullable\":true,\"scale\":2,\"name\":\"CycleCountExpectedQuantity\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"CycleCountActualQuantity\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The quantity of Items actually found during the Cycle Count.\",\"isNullable\":true,\"scale\":2,\"name\":\"CycleCountActualQuantity\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"CycleCountDiscrepancyQuantity\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The difference between the actual stock held and the calculated stock or registered stock.\",\"isNullable\":true,\"scale\":2,\"name\":\"CycleCountDiscrepancyQuantity\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"name\":\"BlindCountIndicator\"},\"dataType\":\"boolean\",\"description\":\"Describes method used in cycle counting and physical inventories where you provide your counters with item number and location but no quantity information.\",\"isNullable\":true,\"name\":\"BlindCountIndicator\"}]}}}",
								"Description": "The Item count at a Warehouse determined by the associated Cycle Count.",
								"DisplayFolderInfo": "{\"name\":\"Inventory\",\"colorCode\":\"#EA279F\"}",
								"PrimaryKeys": "WarehouseLocationId,ItemSku,CycleCountId,WarehouseId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CycleCountType",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "LakeDb1"
							},
							"Description": "The type of cycle count.\n\nEx:\n\nABC CYCLE COUNT\nABC system with the highest count frequency for items with the highest annual usage value\n\nORDER COUNT\nReorder system when stocks are counted at the time of order\n\nUPON RECEIPT COUNT\nReceiver system with counting when goods are received\n\nZERO BALANCE COUNT\nZero balance system to count items when a backorder situation is reached to confirm that no stock is held\n\nTRANSACTION COUNT\nTransaction system where stocks are counted after a specified number of transactions",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CycleCountTypeId",
										"Description": "The unique identifier of a Cycle Count Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountType.cdm.json/CycleCountType",
											"Name": "CycleCountTypeId"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CycleCountTypeName",
										"Description": "The name of a Cycle Count Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountType.cdm.json/CycleCountType",
											"Name": "CycleCountTypeName"
										},
										"DeltaFormatInvalidMessages": []
									},
									{
										"Name": "CycleCountTypeDescription",
										"Description": "The description of a Cycle Count Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 2048,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CycleCountType.cdm.json/CycleCountType",
											"Name": "CycleCountTypeDescription"
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://synapsefilesystem1@shgillasynapse1datalake.dfs.core.windows.net/LakeDb1/CycleCountType",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://synapsefilesystem1@shgillasynapse1datalake.dfs.core.windows.net/LakeDb1/CycleCountType",
									"Properties": {
										"LinkedServiceName": "shgillasynapse1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CycleCountTypeId\":{\"entity\":\"CycleCountType.cdm.json/CycleCountType\",\"name\":\"CycleCountTypeId\"},\"CycleCountTypeName\":{\"entity\":\"CycleCountType.cdm.json/CycleCountType\",\"name\":\"CycleCountTypeName\"},\"CycleCountTypeDescription\":{\"entity\":\"CycleCountType.cdm.json/CycleCountType\",\"name\":\"CycleCountTypeDescription\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CycleCountType\",\"path\":\"CycleCountType.cdm.json/CycleCountType\"},\"description\":\"The type of cycle count.\\n\\nEx:\\n\\nABC CYCLE COUNT\\nABC system with the highest count frequency for items with the highest annual usage value\\n\\nORDER COUNT\\nReorder system when stocks are counted at the time of order\\n\\nUPON RECEIPT COUNT\\nReceiver system with counting when goods are received\\n\\nZERO BALANCE COUNT\\nZero balance system to count items when a backorder situation is reached to confirm that no stock is held\\n\\nTRANSACTION COUNT\\nTransaction system where stocks are counted after a specified number of transactions\",\"primaryKey\":[\"CycleCountTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountType.cdm.json/CycleCountType\",\"name\":\"CycleCountTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Cycle Count Type.\",\"isNullable\":false,\"name\":\"CycleCountTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountType.cdm.json/CycleCountType\",\"name\":\"CycleCountTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"The name of a Cycle Count Type.\",\"isNullable\":true,\"name\":\"CycleCountTypeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CycleCountType.cdm.json/CycleCountType\",\"name\":\"CycleCountTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":2048,\"description\":\"The description of a Cycle Count Type.\",\"isNullable\":true,\"name\":\"CycleCountTypeDescription\"}]}}}",
								"Description": "The type of cycle count.\n\nEx:\n\nABC CYCLE COUNT\nABC system with the highest count frequency for items with the highest annual usage value\n\nORDER COUNT\nReorder system when stocks are counted at the time of order\n\nUPON RECEIPT COUNT\nReceiver system with counting when goods are received\n\nZERO BALANCE COUNT\nZero balance system to count items when a backorder situation is reached to confirm that no stock is held\n\nTRANSACTION COUNT\nTransaction system where stocks are counted after a specified number of transactions",
								"DisplayFolderInfo": "{\"name\":\"Inventory\",\"colorCode\":\"#EA279F\"}",
								"PrimaryKeys": "CycleCountTypeId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "customTable1",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "LakeDb1"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "Column_1",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"DeltaFormatInvalidMessages": []
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://synapsefilesystem1@shgillasynapse1datalake.dfs.core.windows.net/LakeDb1/customTable1",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://synapsefilesystem1@shgillasynapse1datalake.dfs.core.windows.net/LakeDb1/customTable1",
									"Properties": {
										"LinkedServiceName": "shgillasynapse1-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-fydwhdjgal",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "LakeDb1"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "CycleCount",
							"ToTableName": "CycleCountItemInventory",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CycleCountId",
									"ToColumnName": "CycleCountId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"CycleCount.cdm.json/CycleCount\",\"toEntity\":\"CycleCountItemInventory.cdm.json/CycleCountItemInventory\",\"joinPairs\":[{\"fromAttribute\":\"CycleCountId\",\"toAttribute\":\"CycleCountId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-kkafskphze",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "LakeDb1"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "CycleCountType",
							"ToTableName": "CycleCount",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CycleCountTypeId",
									"ToColumnName": "CycleCountTypeId"
								}
							],
							"RelationshipType": 0,
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"CycleCountType.cdm.json/CycleCountType\",\"toEntity\":\"CycleCount.cdm.json/CycleCount\",\"joinPairs\":[{\"fromAttribute\":\"CycleCountTypeId\",\"toAttribute\":\"CycleCountTypeId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkpool1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		}
	]
}